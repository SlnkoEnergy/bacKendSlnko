name: Deploy to Hostinger VPS (Development)

on:
  push:
    branches:
      - development

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
            set -Eeuo pipefail

            cd ~/Protrac/bacKendSlnko
            git fetch origin development
            git checkout development
            git pull origin development

            # Ensure Docker network exists for inter-container DNS
            docker network create protrac_net 2>/dev/null || true

     
            if ! docker ps --format '{{.Names}}' | grep -q '^dragonfly$'; then
              docker rm -f dragonfly 2>/dev/null || true
              docker run -d --name dragonfly \
                --restart unless-stopped \
                --network protrac_net \
                -p 127.0.0.1:6379:6379 \
                docker.dragonflydb.io/dragonflydb/dragonfly:v1.33 \
                --requirepass CHANGE_ME_STRONG
            else
              docker start dragonfly || true
            fi

            # Quick health retry (avoids race on first boot)
            for i in 1 2 3 4 5; do
              if docker exec dragonfly redis-cli -a CHANGE_ME_STRONG PING >/dev/null 2>&1; then
                echo "Dragonfly is ready."; break
              fi
              echo "Waiting for Dragonfly..."; sleep 1
            done

            # --- API: rebuild and run ---
            docker rm -f prod_api_development 2>/dev/null || true
            docker build --pull -t prod_api_development .

            docker run -d --name prod_api_development \
              --env-file .env.dev \
              --network protrac_net \
              -p 5002:8080 \
              --restart unless-stopped \
              prod_api_development

            echo "REDIS_URL inside container:"
            docker exec prod_api_development printenv REDIS_URL || true

            # --- Cleanup: remove dangling images to save disk space ---
            docker image prune -f
          EOF
