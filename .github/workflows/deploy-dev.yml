name: Deploy to Hostinger VPS (Development)

on:
  push:
    branches: [development]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} << "EOF"
            set -Eeuo pipefail

            cd ~/Protrac/bacKendSlnko
            git fetch origin development
            git checkout development
            git pull --rebase origin development

            # Ensure Docker network exists
            docker network create protrac_net 2>/dev/null || true

            # Read Dragonfly password from .env.dev (kept on server)
            DFLY_PASSWORD=$(grep -E '^DFLY_PASSWORD=' .env.dev | cut -d= -f2- | tr -d '\r')
            if [ -z "$DFLY_PASSWORD" ]; then
              echo "DFLY_PASSWORD missing in .env.dev"; exit 1
            fi

            # Ensure data volume exists
            docker volume create dragonfly_data >/dev/null

            # Start/replace Dragonfly (binds to 127.0.0.1:6379 on host; open as 'dragonfly:6379' in protrac_net)
            docker rm -f dragonfly 2>/dev/null || true
            docker run -d --name dragonfly \
              --restart unless-stopped \
              --network protrac_net \ÃŸ
              -p 127.0.0.1:6379:6379 \
              -v dragonfly_data:/data \
              ghcr.io/dragonflydb/dragonfly:latest \
              --dir=/data \
              --dbfilename=dump \
              --maxmemory=4gb \
              --requirepass "$DFLY_PASSWORD"

            # Health check Dragonfly from the same network
            docker run --rm --network protrac_net redis:7-alpine \
              redis-cli -h dragonfly -a "$DFLY_PASSWORD" PING | grep -q PONG

            # --- API: rebuild and run (reads .env.dev) ---
            docker rm -f prod_api_development 2>/dev/null || true
            docker build --pull -t prod_api_development .

            docker run -d --name prod_api_development \
              --env-file .env.dev \
              --network protrac_net \
              -p 5002:8080 \
              --restart unless-stopped \
              prod_api_development

            echo "REDIS_URL inside container:"
            docker exec prod_api_development printenv REDIS_URL || true
          EOF
